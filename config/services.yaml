# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    google_recaptcha_secret: '%env(GOOGLE_RECAPTCHA_SECRET)%'
    google_recaptcha_enabled: '%env(bool:GOOGLE_RECAPTCHA_ENABLED)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Model,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones


    ## Listeners ##

    user.listener:
        class: App\EventListener\UserListener
        tags:
            - { name: doctrine.orm.entity_listener, event: prePersist, entity: App\Entity\User }
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Entity\User }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\User }

    json_web_token.listener:
        class: App\EventListener\JsonWebTokenListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    secure_action.listener:
        class: App\EventListener\SecureActionListener
        arguments:
            - !tagged_locator
                tag: secure_action.handler
                index_by: key
        tags:
            - { name: flush_listener_service, key: App\Entity\SecureAction }

    flush.listener:
        class: App\EventListener\FlushListener
        arguments:
            - !tagged_locator
                tag: flush_listener_service
                index_by: key
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    ## SecureAction handlers ##
    # Using https://github.com/symfony/symfony/pull/30348

    validate_email_address.handler:
        class: App\Service\SecureActionHandler\ValidateEmailAddressHandler
        tags:
            - { name: secure_action.handler, key: !php/const App\Entity\SecureAction::ACTION_VALIDATE_EMAIL_ADDRESS }

    reset_password.handler:
        class: App\Service\SecureActionHandler\ResetPasswordHandler
        tags:
            - { name: secure_action.handler, key: !php/const App\Entity\SecureAction::ACTION_RESET_PASSWORD }

    App\EventSubscriber\ReCaptchaSubscriber:
        class: App\EventSubscriber\ReCaptchaSubscriber
        arguments:
            - '@ReCaptcha\ReCaptcha'
            - '%google_recaptcha_enabled%'

    App\Controller\ReCaptchaController:
        class: App\Controller\ReCaptchaController
        arguments:
            - '@WoohooLabs\Yin\JsonApi\JsonApi'
            - '%google_recaptcha_site_key%'
            - '%google_recaptcha_enabled%'
